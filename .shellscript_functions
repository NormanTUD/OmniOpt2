SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd $SCRIPT_DIR

FROZEN=""

function displaytime {
	local T=$1
		local D=$((T/60/60/24))
		local H=$((T/60/60%24))
		local M=$((T/60%60))
		local S=$((T%60))
		(( $D > 0 )) && printf '%d days ' $D
		(( $H > 0 )) && printf '%d hours ' $H
		(( $M > 0 )) && printf '%d minutes ' $M
		(( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
		printf '%d seconds\n' $S
}

function error_message {
	eval `resize`
	MSG=$1
	echo_red "$MSG"
	export NEWT_COLORS='
window=,red
border=white,red
textbox=white,red
button=black,white
'
    whiptail --title "Error Message" --scrolltext --msgbox "$MSG" $LINES $COLUMNS $(( $LINES - 8 ))
	export NEWT_COLORS=""
}

export RUN_VIA_RUNSH=1

export PYTHONDONTWRITEBYTECODE=1

IFS=$'\n'

Green='\033[0;32m'
Color_Off='\033[0m'
Red='\033[0;31m'

function red {
	echo -e "${Red}$1${Color_Off}"
}

function green {
	echo -e "${Green}$1${Color_Off}"
}

set -e

LMOD_DIR=/software/foundation/$(uname -m)/lmod/lmod/libexec

myml () {
	if [[ -e $LMOD_DIR/ml_cmd ]]; then
		eval "$($LMOD_DIR/ml_cmd "$@")" 2>/dev/null >/dev/null
	fi
}

if [ -z "$LOAD_MODULES" ] || [ "$LOAD_MODULES" -eq 1 ]; then
	myml release/23.04 GCCcore/12.2.0 Python/3.10.8 GCCcore/11.3.0 Tkinter/3.10.4

	if [[ $(uname -m) == "ppc64le" ]]; then
		myml GCC/12.2.0 OpenBLAS/0.3.21
	fi
fi

VENV_DIR_NAME=.omniax_$(uname -m)_$(python3 --version | sed -e 's# #_#g')
VENV_DIR=$HOME/$VENV_DIR_NAME

UPGRADED_PIP=0

function ppip {
	set +e
	echo "$FROZEN" | grep -i "$1" 2>/dev/null >/dev/null
	_exit_code=$?

	if [[ "$_exit_code" != "0" ]]; then
		if [[ "$UPGRADED_PIP" -eq "0" ]]; then
			pip install --upgrade pip
			UPGRADED_PIP=1
		fi

		pip3 install $1 || {
			red "Failed to install $1. Deleting $VENV_DIR..."
			rm -rf $VENV_DIR || {
				red "Failed to delete $VENV_DIR"
				exit 4
			}

			exit 3
		}

		green "$1 installed successfully"

		FROZEN=$(pip3 freeze)
	fi
	set -e
}

function install_required_modules {
	ppip Rich
	ppip scikit-learn
	ppip submitit
	ppip ax
	ppip ax-platform
	ppip matplotlib
	ppip Pyarrow
	ppip textual
	ppip tqdm
	ppip plotext
	ppip plotille
	ppip watchdog
	ppip seaborn
	ppip art
	ppip pyvista
	ppip catsay
	ppip sixel
	ppip pytz
	ppip tzlocal

	#if ! declare -f ml 2>/dev/null >/dev/null; then
	#	ppip tkinter
	#else
	#	echo "Not installing tkinter, because it (hopefully) has already been loaded with ml"
	#fi
}

if [[ "$SCRIPT_DIR" != *"$VENV_DIR"* ]]; then
	if [[ ! -d "$VENV_DIR" ]]; then
		if ! command -v gcc >/dev/null 2>/dev/null; then
			red "GCC not found. Try installing with, for example, with 'sudo apt-get install gcc' (depending on your distro)"
			exit 3
		fi

		if ! command -v resize >/dev/null 2>/dev/null; then
			red "resize not found. Try installing xterm with, for example, with 'sudo apt-get install xterm' (depending on your distro)"
			exit 4
		fi

		if ! python3 -c 'from distutils.sysconfig import get_makefile_filename as m; from os.path import isfile; import sys ; sys.exit(not isfile(m()))' >/dev/null 2>/dev/null; then
			red "python3 header files not found. Try installing them, for example, with 'sudo apt-get install python3-dev' (depending on your distro)"
			exit 5
		fi

		green "Environment $VENV_DIR was not found. Creating it..."
		python3 -mvenv $VENV_DIR/ || {
			red "Failed to create Virtual Environment in $VENV_DIR"
			exit 1
		}

		green "Virtual Environment $VENV_DIR created. Activating it..."

		source $VENV_DIR/bin/activate || {
			red "Failed to activate $VENV_DIR"
			exit 2
		}

		green "Virtual Environment activated. Now installing software. This may take some time."

	fi
fi

source $VENV_DIR/bin/activate || {
	red "Failed to activate $VENV_DIR"
	exit 2
}

FROZEN=$(pip3 freeze)
install_required_modules
