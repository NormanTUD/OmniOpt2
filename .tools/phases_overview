#!/bin/bash

function echoerr() {
        echo "$@" 1>&2
}

function yellow_text {
        echoerr -e "\e\033[0;33m$1\e[0m"
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

function green_text {
        echoerr -e "\e\033[0;32m$1\e[0m"
}

run_dir=$1
random_phase=$2
systematic_phase=$3
manual=$4

if [[ ! -d $run_dir ]]; then
	red_text "$run_dir not found"
	exit 1
fi

if [[ ! -e "$run_dir/results.csv" ]]; then
	red_text "$run_dir/results.csv not found"
	exit 2
fi

NR_RANDOM=$(cat $run_dir/results.csv | grep -v "trial_index,arm_name" | grep -i sobol | grep COMPLETED | wc -l)
NR_MANUAL=$(cat $run_dir/results.csv | grep -v "trial_index,arm_name" | grep -i manual | grep COMPLETED | wc -l)
NR_NONRANDOM=$(cat $run_dir/results.csv | grep -v "trial_index,arm_name" | grep -iv sobol | grep -iv manual | grep -iv running | grep COMPLETED | wc -l)

echo "Random steps:    $NR_RANDOM"
echo "Nonrandom steps: $NR_NONRANDOM"
echo "Manual steps:    $NR_MANUAL"

errors=()

if [[ ! -z $random_phase ]]; then
	if [[ $NR_RANDOM -ne $random_phase ]]; then
		red_text "Number of random steps is wrong, should be $random_phase, is $NR_RANDOM"
		errors+=("Number of random steps is wrong, should be $random_phase, is $NR_RANDOM")
	else
		green_text "Number of random steps OK"
	fi
fi

if [[ ! -z $systematic_phase ]]; then
	if [[ $NR_NONRANDOM -ne $systematic_phase ]]; then
		red_text "Number of nonrandom steps is wrong, should be $systematic_phase, is $NR_NONRANDOM"
		errors+=("Number of nonrandom steps is wrong, should be $systematic_phase, is $NR_NONRANDOM")
	else
		green_text "Number of nonrandom steps OK"
	fi
fi

if [[ ! -z $manual ]]; then
	if [[ $NR_MANUAL -ne $manual ]]; then
		red_text "Number of steps 'manual' is wrong, should be $manual, is $NR_MANUAL"
		errors+=("Number of steps 'manual' is wrong, should be $manual, is $NR_MANUAL")
	else
		green_text "Number of manual steps OK"
	fi
fi

if [[ ! -z $systematic_phase ]] || [[ ! -z $manual ]] || [[ ! -z $random_phase ]]; then
	if [ ${#errors[@]} -eq 0 ]; then
		green_text "No phases-overview errors"
		exit 0
	else
		red_text "=> phases-overview-ERRORS => phases-overview-ERRORS => phases-overview-ERRORS =>"
		for i in "${errors[@]}"; do
			red_text "$i"
		done

		exit ${#errors[@]}
	fi

	secs=$SECONDS
	hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
	printf 'phases_overview test took: %02d:%02d:%02d\n' $hrs $mins $secs
fi
