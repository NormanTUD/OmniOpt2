#!/bin/bash

if [[ ! -z $PRINT_SEPERATOR ]]; then # for tests, so that things are properly visually seperated
	echo ""
	echo "========================================================================"
	echo ""
fi

_save_to_file=0

function inputbox {
	TITLE=$1
	MSG=$2
	DEFAULT=$3

	eval `resize`
	RESULT=$(whiptail --inputbox "$MSG" $LINES $COLUMNS "$DEFAULT" --title "$TITLE" 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [[ $exitstatus == 0 ]]; then
		echo "$RESULT"
	else
		echo "You chose to cancel (1)"
		exit 1
	fi
}

function ask_min_max {
	min=$(inputbox "Minimum value for plot" "Enter a Minimum value for plotting $run_dir (float), leave empty for no Minimum value" "")
	max=$(inputbox "Maximum value for plot" "Enter a Maximum value for plotting $run_dir (float), leave empty for no Maximum value" "")

	if [ -n "$min" ]; then
		# Check if $min is a number (integer or float, positive or negative)
		if [[ ! "$min" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
			echo "\$min is not a valid number. Setting it to empty."
			min=""
		fi
	fi


	if [ -n "$max" ]; then
		# Check if $max is a number (integer or float, positive or negative)
		if [[ ! "$max" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
			echo "\$max is not a valid number. Setting it to empty."
			max=""
		fi
	fi

	if [ -n "$min" ] && [ -n "$max" ]; then
		# Check if min is greater than max
		if (( $(echo "$max < $min" |bc -l) )); then
			# Swap values
			temp="$min"
			min="$max"
			max="$temp"
		else
			echo "min is less than or equal to max. No need to swap."
			true
		fi
	fi
}


function displaytime {
	local T=$1
	local D=$((T/60/60/24))
	local H=$((T/60/60%24))
	local M=$((T/60%60))
	local S=$((T%60))
	(( $D > 0 )) && printf '%d days ' $D
	(( $H > 0 )) && printf '%d hours ' $H
	(( $M > 0 )) && printf '%d minutes ' $M
	(( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
	printf '%d seconds\n' $S
}

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
export ORIGINAL_PWD=$(pwd)

expected_plot_types=("menu")
whiptail_args=()

for possible_plot_type in $(ls $SCRIPT_DIR/.omniopt_plot_*.py | sed -e 's#\.py##' -e 's#.*_plot_##' | tac); do
	expected_plot_types+=("$possible_plot_type")
done

function echoerr() {
        echo "$@" 1>&2
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

set -e
set -o pipefail

function calltracer () {
	if [[ -z $NO_RUNTIME ]]; then
		echo 'Last file/last line:'
		caller

		echo "Runtime: $(displaytime $SECONDS)"
	fi
}

trap 'calltracer' ERR

plot_type="menu"
min=
max=
run_dir=""
help=0

args=("$@")
k=0

while [ $k -lt ${#args[@]} ]; do
    arg="${args[k]}"

    case $arg in
        --run_dir=*)
            run_dir="${arg#*=}"
            shift
            ;;

        --run_dir)
            k=$((k+1))
            if [ $k -ge ${#args[@]} ] || [[ "${args[k]}" == --* ]]; then
                echo "Error: --run_dir requires a value"
                exit 1
            fi
            run_dir="${args[k]}"
            shift
            shift
            ;;

        --save_to_file=*)
            _save_to_file="${arg#*=}"
            shift
            ;;

        --save_to_file)
            k=$((k+1))
            if [ $k -ge ${#args[@]} ] || [[ "${args[k]}" == --* ]]; then
                echo "Error: --save_to_file requires a value"
                exit 1
            fi
            _save_to_file="${args[k]}"
            shift
            shift
            ;;

        --min=*)
            min="${arg#*=}"
            shift
            ;;

        --min)
            k=$((k+1))
            if [ $k -ge ${#args[@]} ] || [[ "${args[k]}" == --* ]]; then
                echo "Error: --min requires a value"
                exit 1
            fi
            min="${args[k]}"
            shift
            shift
            ;;

        --max=*)
            max="${arg#*=}"
            shift
            ;;

        --max)
            k=$((k+1))
            if [ $k -ge ${#args[@]} ] || [[ "${args[k]}" == --* ]]; then
                echo "Error: --max requires a value"
                exit 1
            fi
            max="${args[k]}"
            shift
            shift
            ;;

        --plot_type=*)
            plot_type="${arg#*=}"
            shift
            ;;

        --plot_type)
            k=$((k+1))
            if [ $k -ge ${#args[@]} ] || [[ "${args[k]}" == --* ]]; then
                echo "Error: --plot_type requires a value"
                exit 1
            fi
            plot_type="${args[k]}"
            shift
            shift
            ;;

        --help|-h)
            help=1
            shift
            ;;

        --debug)
            set -x
            shift
            ;;
    esac
    k=$((k+1))
done

if [[ ! " ${expected_plot_types[@]} " =~ " $plot_type " ]]; then
	# Verbinden Sie die Elemente des Arrays zu einem mit "," getrennten String
	joined_plot_types=$(printf "%s, " "${expected_plot_types[@]}")

	# Entfernen Sie das letzte "," vom gejointen String
	joined_plot_types=${joined_plot_types%, }

	echo "Invalid plot type $plot_type, valid plot types: $joined_plot_types"
	exit 99
fi

function menu {
	whiptail_args=()
	for possible_plot_type in "${expected_plot_types[@]}"; do
		if [[ "$possible_plot_type" == "menu" ]]; then
			continue
		fi

		expected_files=()
		for expected_file in $(cat $SCRIPT_DIR/.omniopt_plot_${possible_plot_type}.py | grep "# EXPECTED FILES" | sed -e 's/# EXPECTED FILES: //'); do
			expected_files+=("$expected_file")
		done

		ALL_FILES_THERE=1

		for expected_file in "${expected_files[@]}"; do
			if [[ $(ls $run_dir | grep "$expected_file" | wc -l 2>/dev/null) -lt 1 ]]; then
				ALL_FILES_THERE=0
			fi
		done

		if [[ $ALL_FILES_THERE -eq 1 ]]; then
			trap '' ERR
			set +e
			num_not_disabled_min_param=$(grep args.min $SCRIPT_DIR/.omniopt_plot_${possible_plot_type}.py | wc -l)
			set -e
			trap 'calltracer' ERR

			accepts_min_max_string=""

			if [[ "$num_not_disabled_min_param" -ne "0" ]]; then
				accepts_min_max_string=", honours min/max"
			fi

			whiptail_args+=("$possible_plot_type" "$(cat $SCRIPT_DIR/.omniopt_plot_${possible_plot_type}.py | grep '# DESCRIPTION' | sed -e 's/#\s*DESCRIPTION: //')$accepts_min_max_string")
			if grep add_argument $SCRIPT_DIR/.omniopt_plot_${possible_plot_type}.py | grep save_to_file | grep -v useless 2>&1 >/dev/null; then
				whiptail_args+=("$possible_plot_type --save_to_file" "$(cat $SCRIPT_DIR/.omniopt_plot_${possible_plot_type}.py | grep '# DESCRIPTION' | sed -e 's/#\s*DESCRIPTION: //')$accepts_min_max_string")
			fi
		fi
	done

	if [ ${#whiptail_args[@]} -eq 0 ]; then
		echo "It seems like the run folder $run_dir does not have any plottable data."
		exit 3
	fi

	minmaxstring=""
	if [[ -z $min ]] && [[ -z $max ]]; then
		#minmaxstring="Neither min nor max were set"
		true
	elif [[ -z $min ]] && ! [[ -z $max ]]; then 
		minmaxstring=" (max: $max)"
	elif ! [[ -z $min ]] && [[ -z $max ]]; then 
		minmaxstring=" (min: $min)"
	else
		minmaxstring=" (min: $min, max: $max)"
	fi

	if [[ -z $min ]] && [[ -z $max ]]; then
		#minmaxstring="Neither min nor max were set"
		true
	elif [[ -z $min ]] && ! [[ -z $max ]]; then 
		minmaxstring="(max: $max)"
	elif ! [[ -z $min ]] && [[ -z $max ]]; then 
		minmaxstring=" (min: $min)"
	else
		minmaxstring=" (min: $min, max: $max)"
	fi

	eval `resize`
	WHATTODO=$(whiptail \
		--title "Available options for $run_dir" \
		--menu \
		"Chose what plot to open:" \
		$LINES $COLUMNS $(( $LINES - 8 )) \
		"${whiptail_args[@]}" \
		"minmax)" "set min/max values$minmaxstring" \
		"q)" "quit" 3>&1 1>&2 2>&3
	)

	if [[ "$WHATTODO" == "q)" ]]; then
		exit 0
	fi

	if [[ "$WHATTODO" == "minmax)" ]]; then
		ask_min_max

		if [[ -z $min ]] && [[ -z $max ]]; then
			#echo "Neither min nor max were set"
			bash $SCRIPT_DIR/omniopt_plot --run_dir $run_dir $*
		elif [[ -z $min ]] && ! [[ -z $max ]]; then 
			echo "min was not set but max ($max)"
			bash $SCRIPT_DIR/omniopt_plot --run_dir $run_dir $* --max=$max 
			exit $?
		elif ! [[ -z $min ]] && [[ -z $max ]]; then 
			echo "min ($min) was set but max was not"
			bash $SCRIPT_DIR/omniopt_plot --run_dir $run_dir $* --min=$min 
			exit $?
		else
			echo "min ($min) and max ($max) were set"
			bash $SCRIPT_DIR/omniopt_plot --run_dir $run_dir $* --max=$min -max=$max 
			exit $?
		fi

		echo "This exit should never be reached"
		exit
	fi

	plot_type=$WHATTODO
	if [[ "$plot_type" == *"save_to_file"* ]]; then
		plot_type=$(echo "$plot_type" | sed -e 's# .*##')
		if [[ "$_save_to_file" -eq "0" ]]; then
			_save_to_file=1
		fi
	fi

	if [[ "$_save_to_file" != "0" ]]; then
		_path=$(whiptail --inputbox "Path of the plot?" 8 39 "$run_dir/$plot_type.svg" --title "Choose path" 3>&1 1>&2 2>&3)

		exitstatus=$?
		if [ $exitstatus = 0 ]; then
			_save_to_file="$_path"
		else
			exit 0
		fi
	fi
}

if [[ "$plot_type" == "menu" ]]; then
	if [[ "$run_dir" == "" ]]; then
		echo "--run_dir is missing"
		exit 1
	fi

	if [[ -f "$run_dir" ]]; then
		echo "--run_dir is a file"
		exit 1
	fi

	if [[ ! -d "$run_dir" ]]; then
		echo "--run_dir is not a directory"
		exit 1
	fi

	menu
fi

cd $ORIGINAL_PWD

source $SCRIPT_DIR/.shellscript_functions
source $SCRIPT_DIR/.general.sh

if [[ "$plot_type" != "menu" ]]; then
	if ! [[ -e "$SCRIPT_DIR/.omniopt_plot_$plot_type.py" ]]; then
		# Verbinden Sie die Elemente des Arrays zu einem mit "," getrennten String
		joined_plot_types=$(printf "%s, " "${expected_plot_types[@]}")

		# Entfernen Sie das letzte "," vom gejointen String
		joined_plot_types=${joined_plot_types%, }

		echo "Invalid plot type $plot_type, valid plot types: $joined_plot_types"
		exit 5
	fi
fi

set +e
if [[ "$_save_to_file" == "0" ]]; then
	OUTPUT=$(python3 $SCRIPT_DIR/.omniopt_plot_$plot_type.py --run_dir $run_dir $* 2>&1)
	exit_code=$?
else
	OUTPUT=$(python3 $SCRIPT_DIR/.omniopt_plot_$plot_type.py --run_dir $run_dir --save_to_file=$_save_to_file $* 2>&1)
	exit_code=$?
fi
set -e

if [[ "$exit_code" -ne "0" ]]; then
	if command -v whiptail 2>/dev/null >/dev/null; then
		if [[ -z $NO_WHIPTAIL ]]; then
			error_message "$OUTPUT"
		else
			if [[ ! -z "$OUTPUT" ]]; then
				echo_red "$OUTPUT"
			fi
		fi
	else
		echo_red "$OUTPUT"
	fi
else
	if [[ ! -z  "$OUTPUT" ]]; then
		echo "$OUTPUT"
	fi
fi

if [[ -z $NO_RUNTIME ]]; then
	echo "Runtime: $(displaytime $SECONDS), plot_type: $plot_type, exit-code: $exit_code"
fi

exit $exit_code
