#!/bin/bash

function echoerr() {
        echo "$@" 1>&2
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

set -e
set -o pipefail

function calltracer () {
        echo 'Last file/last line:'
        caller
}
trap 'calltracer' ERR

function help () {
        echo "Possible options:"
        echo "  --int_param=(INT)"
        echo "  --int_param_two=(INT)"
        echo "  --float_param=(FLOAT)"
        echo "  --choice_param=(STRING)                            Must be 1, 2, 4, 8, 16 or hallo"
        echo "  --fail_or_not=0|1                                         Whether to fail or not"
        echo "  --help                                             this help"
        echo "  --debug                                            Enables debug mode (set -x)"
        exit $1
}
export int_param=
export int_param_two=
export float_param=
export choice_param=
export fail_or_not=0

for i in $@; do
        case $i in
                --int_param_two=*)
                        int_param_two="${i#*=}"
                        shift
                        ;;
                --int_param=*)
                        int_param="${i#*=}"
                        shift
                        ;;
                --float_param=*)
                        float_param="${i#*=}"
                        shift
                        ;;
                --choice_param=*)
                        choice_param="${i#*=}"
                        shift
                        ;;
                --fail_or_not=*)
                        new_param="${i#*=}"
			if [[ "$new_param" == *"1"* ]]; then
				fail_or_not=1
			fi
                        shift
                        ;;
                -h|--help)
                        help 0
                        ;;
                --debug)
                        set -x
                        ;;
                *)
                        red_text "Unknown parameter $i" >&2
                        help 1
                        ;;
        esac
done

if [[ -z "$int_param" ]]; then red_text "Parameter --int_param cannot be empty"; help 1; fi
if [[ -z "$int_param_two" ]]; then red_text "Parameter --int_param_two cannot be empty"; help 1; fi
if [[ -z "$float_param" ]]; then red_text "Parameter --float_param cannot be empty"; help 1; fi
if [[ -z "$choice_param" ]]; then red_text "Parameter --choice_param cannot be empty"; help 1; fi

if [[ "$fail_or_not" -eq "1" ]]; then
	exit 1
fi

case $choice_param in
    1|2|4|8|16|hallo)
        ;;
    *)
        red_text "error: Invalid choice_param: $choice_param. Must be 1, 2, 4, 8, 16 or hallo."
        help 1
        ;;
esac

if [[ "$choice_param" == "hallo" ]]; then
	choice_param=10
fi

# https://www.sfu.ca/~ssurjano/shekel.html

perl -e 'use strict;
use warnings;
use autodie;
use Data::Dumper;

sub shekel {
        my @args = @_;
        die qq#too many args, need 4# if(@args > 4);
        die qq#not enough args, need 4# if(@args < 4);

        for (my $k = 0; $k < scalar(@args); $k++) {
                if ($args[$k] !~ /^[-+]?\d+(?:\.\d+)?$/) {
                        die qq#Invalid parameter $k: $args[$k] is not a number#;
                }
        }

        my @beta = map { $_ / 10 } (1, 2, 2, 4, 4, 6, 3, 7, 5, 5);

        my @C = (
                [4, 1, 8, 7, 3, 2, 5, 8, 6, 7],
                [4, 1, 8, 6, 7, 9, 3, 1, 2, 3.6],
                [4, 1, 8, 6, 3, 2, 5, 8, 6, 7],
                [4, 1, 8, 6, 7, 9, 3, 1, 2, 3.6]
        );

        my $outer_sum = 0;
        for (my $i = 0; $i < scalar(@beta); $i++) {
                my $inner_sum = 0;
                for (my $j = 0; $j < 4; $j++) {
                        my $x_j = $args[$j];
                        my $beta_i = $beta[$i];
                        my $C_j_i = $C[$j]->[$i];

                        $inner_sum += (($x_j - $C_j_i) ** 2) + $beta_i;
                }
                $outer_sum += $inner_sum;
        }

        $outer_sum = -$outer_sum;

        return $outer_sum;
}


print qq#RESULT: #.shekel(@ARGV).qq#\n#;
' -- $int_param $choice_param $float_param $int_param_two
