#!/bin/bash

export OO_MAIN_TESTS=1
export DONT_SHOW_DONT_INSTALL_MESSAGE=1
export DISABLE_SIXEL_GRAPHICS=1

function displaytime {
	local T=$1
		local D=$((T/60/60/24))
		local H=$((T/60/60%24))
		local M=$((T/60%60))
		local S=$((T%60))
		(( $D > 0 )) && printf '%d days ' $D
		(( $H > 0 )) && printf '%d hours ' $H
		(( $M > 0 )) && printf '%d minutes ' $M
		(( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
		printf '%d seconds\n' $S
}

int_re='^[+-]?[0-9]+$'
errors=()

export PRINT_SEPERATOR=1

EXPECTED_TO_FAIL=0

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SCRIPT_DIR

function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

function echoerr() {
        echo "$@" 1>&2
}

function yellow_text {
        echoerr -e "\e\033[0;33m$1\e[0m"
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

function green_text {
        echoerr -e "\e\033[0;32m$1\e[0m"
}

set -o pipefail

function calltracer () {
	if [[ $EXPECTED_TO_FAIL -ne "1" ]]; then
		yellow_text "Git status hash:"
		git rev-parse HEAD
		red_text 'Error occured in file/line:'
		caller
	fi
}

trap 'calltracer' ERR

function help () {
        echo "Possible options:"
	echo "  --max_eval=(INT)                                   Number of max evals for this test"
	echo "  --num_random_steps=(INT)                           Number of random steps for this test"
	echo "  --num_parallel_jobs=(INT)                          Number of max parallel workers for this test"
	echo "  --gpus=(INT)                                       Nr of GPUs per worker"
        echo "  --help                                             This help"
        echo "  --quick                                            Only run quick tests"
        echo "  --reallyquick                                      Only run really quick tests"
        echo "  --debug                                            Enables debug mode (set -x)"
        exit $1
}

NUM_GPUS=0
if command -v nvidia-smi 2>/dev/null >/dev/null; then
	NUM_GPUS=1
fi

debug=0
max_eval=30
num_parallel_jobs=20
num_random_steps=$num_parallel_jobs
reallyquick=0
quick=0

args=("$@")
k=0
while [ $k -lt ${#args[@]} ]; do
	i="${args[k]}"

	case $i in
		--num_random_steps=*)
			old_num_random_steps=$num_random_steps
			num_random_steps="${i#*=}"
			if ! [[ $num_random_steps =~ $int_re ]] ; then
				red_text "error: --num_random_steps not a INT: $i" >&2
				exit 100
			fi

			;;
		--num_random_steps)
			old_num_random_steps=$num_random_steps

			shift
			k=$((k+1))

			num_random_steps="${args[k]}"
			if ! [[ $num_random_steps =~ $int_re ]] ; then
				red_text "error: --num_random_steps not a INT: $i" >&2
				exit 100
			fi

			;;
		--max_eval=*)
			old_max_eval=$max_eval
			max_eval="${i#*=}"
			if ! [[ $max_eval =~ $int_re ]] ; then
				red_text "error: --max_eval not a INT: $i" >&2
				exit 100
			fi

			;;
		--max_eval)
			old_max_eval=$max_eval

			shift
			k=$((k+1))

			max_eval="${args[k]}"
			if ! [[ $max_eval =~ $int_re ]] ; then
				red_text "error: --max_eval not a INT: $i" >&2
				exit 100
			fi

			;;
		--gpus=*)
			NUM_GPUS="${i#*=}"
			if ! [[ $NUM_GPUS =~ $int_re ]] ; then
				red_text "error: --gpus not a INT: $i" >&2
				exit 100
			fi

			;;
		--gpus)
			shift
			k=$((k+1))

			NUM_GPUS="${args[k]}"
			if ! [[ $NUM_GPUS =~ $int_re ]] ; then
				red_text "error: --gpus not a INT: $i" >&2
				exit 100
			fi
			;;

		--num_parallel_jobs=*)
			num_parallel_jobs="${i#*=}"
			if ! [[ $num_parallel_jobs =~ $int_re ]] ; then
				red_text "error: --num_parallel_jobs not a INT: $i" >&2
				exit 100
			fi

			;;
		--num_parallel_jobs)
			shift
			k=$((k+1))

			num_parallel_jobs="${args[k]}"
			if ! [[ $num_parallel_jobs =~ $int_re ]] ; then
				red_text "error: --num_parallel_jobs not a INT: $i" >&2
				exit 100
			fi

			;;
		--help*)
			help 1
			;;
		--reallyquick)
			reallyquick=1
			quick=1
			;;
		--quick)
			quick=1
			;;

		--debug)
			debug=1
			;;

		*)
			red_text "Unknown parameter $i"
			exit 2
			;;
	esac
	k=$((k+1))
done

if [[ "$num_random_steps" -gt "$max_eval" ]]; then
	yellow_text "--num_random_steps was larger than --max_eval. Switching them..."
	tmp=$num_random_steps
	max_eval=$num_random_steps
	num_random_steps=$tmp
	unset tmp
fi

if [[ "$num_parallel_jobs" -lt "1" ]]; then
	red_text "num_parallel_jobs must be 1 or more, is $num_parallel_jobs"
	exit 1
fi

if [[ "$max_eval" -lt "1" ]]; then
	red_text "Max_eval must be 1 or more, is $max_eval"
	exit 1
fi

if [[ "$debug" -eq "1" ]]; then
	set -x
fi

# _test "NAME" "COMMAND" "WANTED_EXIT_CODE" "ERRORMSG"
function _test {
	NAME=$1
	COMMAND=$2
	WANTED_EXIT_CODE=$3
	ALTERNATIVE_OK_EXIT_CODE=$4

	START_TIME=$(date +%s)

	yellow_text "$NAME..."

	if [[ -z $NAME ]]; then
		echo "_test: first parameter (name) not specified"
		exit 19
	fi

	if [[ -z $COMMAND ]]; then
		echo "_test: second parameter (command) not specified"
		exit 19
	fi

	if [[ -z $WANTED_EXIT_CODE ]]; then
		echo "_test: third parameter (wanted exit code) not specified"
		exit 19
	fi

	if [[ "$WANTED_EXIT_CODE" == "$ALTERNATIVE_OK_EXIT_CODE" ]]; then
		echo "_test: WANTED_EXIT_CODE = ALTERNATIVE_OK_EXIT_CODE. If specified, must be different."
		exit 19
	fi

	set +e

	$COMMAND
	exit_code=$?

	set -e

	if [[ -z $ALTERNATIVE_OK_EXIT_CODE ]]; then
		if [[ "$exit_code" -eq "$WANTED_EXIT_CODE" ]]; then
			ERRORMSG=""
		else
			ERRORMSG="$NAME exited with $exit_code (wanted $WANTED_EXIT_CODE). Command: $COMMAND"
		fi

		if [[ $(echo $ERRORMSG | wc -c) -gt 2 ]]; then
			red_text "$ERRORMSG"
			errors+=($(echo "$ERRORMSG" | base64))
		fi
	else
		if [[ "$ALTERNATIVE_OK_EXIT_CODE" -eq "$exit_code" || "$exit_code" -eq "$WANTED_EXIT_CODE" ]]; then
			ERRORMSG=""
		else
			ERRORMSG="$NAME exited with $exit_code (wanted $WANTED_EXIT_CODE or $ALTERNATIVE_OK_EXIT_CODE). Command: $COMMAND"
		fi

		if [[ $(echo $ERRORMSG | wc -c) -gt 2 ]]; then
			red_text "$ERRORMSG"
			errors+=($(echo "$ERRORMSG" | base64))
		fi
	fi
	END_TIME=$(date +%s)

	TEST_RUN_TIME=$(($END_TIME - $START_TIME))

	echo "Test took $(displaytime $TEST_RUN_TIME) seconds"
}

PARTITION="alpha"
TESTNAME=__main__tests__

cd ..

if [[ "$quick" -eq "0" ]]; then
	bash .tests/example_network/install.sh
fi

_test "Basic tests" "bash omniopt --tests --mem_gb 1 --time 10 --experiment_name test_name --hide_ascii_plots --gpus $NUM_GPUS" 0

export DONT_INSTALL_MODULES=1

if [[ -d "runs/$TESTNAME" ]]; then
	yellow_text "Deleting old runs/$TESTNAME..."
	if [[ -d runs/$TESTNAME ]]; then
		rm -rf runs/$TESTNAME
	fi
fi

function _test_nr_jobs {
	JOBNR=$1
	NRRAND=$2
	NRNONRAND=$3
	NRMANUAL=$4

	_test "Testing if there are the right number of jobs in runs/$TESTNAME/$JOBNR/results.csv" "./.tools/phases_overview runs/__main__tests__/$JOBNR/ $NRRAND $NRNONRAND $NRMANUAL" 0
}

_test "Simple optimization run" ".tests/start_simple_optimization_run --num_parallel_jobs=$num_parallel_jobs --gpus $NUM_GPUS --num_random_steps=$num_random_steps --max_eval=$max_eval" 0
_test_nr_jobs 0 $num_random_steps $(($max_eval-$num_random_steps)) 0

_test "Continued test run" "bash omniopt --continue runs/$TESTNAME/0 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --follow --gpus $NUM_GPUS --hide_ascii_plots --mem_gb 5 --num_random_steps=$num_random_steps --max_eval=$max_eval" 0
_test_nr_jobs 1 $num_random_steps $(($(($max_eval*2))-$num_random_steps)) 0

_test "Continuing already continued job" "bash omniopt --continue runs/$TESTNAME/1 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --follow --gpus $NUM_GPUS --hide_ascii_plots --mem_gb 5 --num_random_steps=$num_random_steps --max_eval=$max_eval --parameter float_param range -1000 1000 float" 0
_test_nr_jobs 2 $num_random_steps $(($(($max_eval*3))-$num_random_steps)) 0


_test "Test search space exhaustion" "./omniopt --partition=$partition --experiment_name=small_test_experiment --mem_gb=1 --time=60 --worker_timeout=60 --max_eval=20 --num_parallel_jobs=10 --gpus=1 --num_random_steps=20 --run_program=ZWNobyAiUkVTVUxUOiAlKHgpIg== --cpus_per_task=1 --tasks_per_node=1 --parameter x choice 0,1 --follow --max_nr_of_zero_results 3" 87

if command -v sbatch 2>/dev/null >/dev/null; then
	excluded_host=$(sinfo | grep -v PARTITION | grep mix | sed -e 's#.*mix\s*##' -e 's#,.*##' -e 's#-.*##' -e 's#\[##')
	_test "Test search space exhaustion" "./omniopt --partition=$partition --experiment_name=small_test_experiment --mem_gb=1 --time=60 --worker_timeout=60 --max_eval=500 --num_parallel_jobs=20 --gpus=1 --num_random_steps=20 --run_program=ZWNobyAiUkVTVUxUOiAlKHgpIg== --cpus_per_task=1 --tasks_per_node=1 --exclude=$excluded_host --parameter x choice 0,1 --follow --max_nr_of_zero_results 3" 87
fi

if [[ "$reallyquick" -eq "0" ]]; then
	_test "Simple optimization run (with allowed failures)" ".tests/start_simple_optimization_run --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --allow_failure --num_random_steps=$num_random_steps" 0 87
	_test "Simple optimization run (grid search)" ".tests/start_simple_optimization_run --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --num_random_steps=$num_random_steps --gridsearch" 0

	_test "Simple optimization run with 1 param" ".tests/start_simple_optimization_run_one_param --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --num_random_steps=$num_random_steps" 0

	_test "Simple optimization run with 2 params" ".tests/start_simple_optimization_run_two_params --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --num_random_steps=$num_random_steps" 0 87

	if [[ "$quick" -eq "0" ]]; then
		for model_name in $(echo "SOBOL GPEI FACTORIAL SAASBO FULLYBAYESIAN LEGACY_BOTORCH BOTORCH_MODULAR UNIFORM BO_MIXED"); do
			_test "Simple optimization run (model: $model_name)" ".tests/start_simple_optimization_run --max_eval=$max_eval --num_parallel_jobs=$num_parallel_jobs --num_random_steps=$num_random_steps --model=$model" 0
		done
	fi

	if [[ -d "runs/__main__I_DO_NOT_EXIST_tests__/0" ]]; then
		yellow_text "Deleting runs/__main__I_DO_NOT_EXIST_tests__/0"
		rm -rf runs/__main__I_DO_NOT_EXIST_tests__/0
	fi

	_test "Continue non-existing job" "bash omniopt --continue runs/__main__I_DO_NOT_EXIST_tests__/0 --num_parallel_jobs $num_parallel_jobs --worker_timeout 10 --mem_gb 1 --time 30 --follow --gpus $NUM_GPUS --hide_ascii_plots --num_random_steps=$num_random_steps --max_eval=$max_eval" 105
	_test "Trying to run 0 random steps (should fail)" "bash omniopt --partition=$PARTITION --experiment_name=$TESTNAME --mem_gb=1 --time=60 --worker_timeout=1 --max_eval=2 --num_parallel_jobs=20 --gpus $NUM_GPUS --run_program=Li8udGVzdHMvb3B0aW1pemF0aW9uX2V4YW1wbGUgLS1pbnRfcGFyYW09JyUoaW50X3BhcmFtKScgLS1mbG9hdF9wYXJhbT0nJShmbG9hdF9wYXJhbSknIC0tY2hvaWNlX3BhcmFtPSclKGNob2ljZV9wYXJhbSknICAtLWludF9wYXJhbV90d289JyUoaW50X3BhcmFtX3R3bykn --parameter int_param range -5 5 int --parameter float_param range -5 5 float --parameter choice_param choice 1,2,4,8,16,hallo --parameter int_param_two range -6 6 int --hide_ascii_plots --num_random_steps=0 --follow" 233

	TESTNAME="test_wronggoing_stuff"
	yellow_text "Deleting runs/$TESTNAME/..."
	if [[ -d runs/$TESTNAME/ ]]; then
		rm -rf runs/$TESTNAME/
	fi

	_test "Test stuff that goes wrong" "bash .tests/wronggoing_stuff --num_random_steps=$num_random_steps --gpus=$NUM_GPUS" 0
	#_test_nr_jobs 0 $num_random_steps $((20-$num_random_steps)) 0

	_test "Test stuff that goes wrong without successes" "bash .tests/wronggoing_stuff --nosuccess --num_random_steps=$num_random_steps --gpus=$NUM_GPUS" 87
	#_test_nr_jobs 1 1 0 0

	if [[ "$quick" -eq "0" ]]; then
		_test "Example Network" "bash .tests/train_example_network --max_epochs=$max_eval --max_eval=$max_eval --num_random_steps=$num_random_steps --follow" 0
		_test "Example Network (grid search)" "bash .tests/train_example_network --max_epochs=$max_eval --max_eval=$max_eval --num_random_steps=$num_random_steps --gridsearch" 0
	fi
	_test "Plot-Tests" "bash .tests/plots" 0
fi
_test "Plot Documentation" "bash .tests/plot_documentation_has_all_plot_types" 0
_test "help page Documentation" "bash .tests/help_page" 0
_test "folder structure Documentation" "bash .tests/folder_structure" 0
_test "state_files Documentation" "bash ./.tests/state_files" 0
_test "php_files syntax check" "bash .tests/php_files" 0

if [ ${#errors[@]} -eq 0 ]; then
	green_text "No errors"
	exit 0
else
	red_text "=> ERRORS => ERRORS => ERRORS =>"
	for i in "${errors[@]}"; do
		red_text "$(echo $i | base64 --decode)"
		echo ""
	done

	exit ${#errors[@]}
fi

echo "Test took $(displaytime $SECONDS)"
