#!/bin/bash

export OO_MAIN_TESTS=1

function echoerr() {
        echo "$@" 1>&2
}

function yellow_text {
        echoerr -e "\e\033[0;33m$1\e[0m"
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

function green_text {
        echoerr -e "\e\033[0;32m$1\e[0m"
}

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SCRIPT_DIR

cd test_wronggoing_stuff.bin

function echoerr() {
        echo "$@" 1>&2
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

set -e
set -o pipefail

function calltracer () {
	yellow_text "Git status hash:"
	git rev-parse HEAD
        red_text 'Error occured in file/line:'
        caller
}

trap 'calltracer' ERR

export max_eval=200
export num_parallel_jobs=20
export worker_timeout=30
export mem_gb=5
export runtime=300
export max_epochs=10
export follow=0
export gridsearch=0
export num_random_steps=$num_parallel_jobs

function help () {
        echo "train_example_network: Trains an example network from asanAI for testing OmniOpt"
        echo "Possible options:"
        echo "  --help                                             this help"
        echo "  --debug                                            Enables debug mode (set -x)"
	echo "  --num_parallel_jobs=n                              Number of parallel jobs (default: $num_parallel_jobs)"
	echo "  --worker_timeout=n                                 Number of minutes for a single-worker to timeout (default: $worker_timeout)"
	echo "  --mem_gb=n                                         Memory in GB (default $mem_gb)"
	echo "  --time=n                                           Max runtime in minutes (default: $runtime)"
	echo "  --num_random_steps=(INT)                           Number of random steps"
	echo "  --max_eval=n                                       Max number of evals (default: $max_eval)"
	echo "  --max_epochs=n                                     Number of max epochs (default: $max_epochs)"
	echo "  --follow                                           Follow the output (default: $follow)"
	echo "  --gridsearch                                       Do gridsearch"
        exit $1
}

function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

for i in $@; do
        case $i in
		--num_random_steps=*)
			num_random_steps="${i#*=}"
			if ! [[ $num_random_steps =~ $int_re ]] ; then
				red_text "error: --num_random_steps not a INT: $i" >&2
				exit 100
			fi

			;;
		--num_random_steps)
			shift
			k=$((k+1))

			num_random_steps="${args[k]}"
			if ! [[ $num_random_steps =~ $int_re ]] ; then
				red_text "error: --num_random_steps not a INT: $i" >&2
				exit 100
			fi

			;;
		--mem_gb=*)
			mem_gb="${i#*=}"
			shift
			;;
		--worker_timeout=*)
			worker_timeout="${i#*=}"
			shift
			;;
		--num_parallel_jobs=*)
			num_parallel_jobs="${i#*=}"
			shift
			;;
		--time=*)
			runtime="${i#*=}"
			shift
			;;
		--max_epochs=*)
			max_epochs="${i#*=}"
			shift
			;;
		--max_eval=*)
			max_eval="${i#*=}"
			shift
			;;
                --gridsearch)
                        gridsearch=1
                        shift
                        ;;
                --follow)
                        follow=1
                        shift
                        ;;
                -h|--help)
                        help 0
                        ;;
                --debug)
                        set -x
                        ;;
                *)
                        red_text "Unknown parameter $i" >&2
                        help 1
                        ;;
        esac
done

PARTITION="alpha"
NUM_GPUS=0

if command -v nvidia-smi 2>/dev/null >/dev/null; then
	NUM_GPUS=$(nvidia-smi --list-gpus | wc -l)
fi

if [[ "$NUM_GPUS" -ne "0" ]]; then
	NUM_GPUS=1
fi

cd ..
cd ..

#if [[ -d runs/example_network/ ]]; then
#	rm -rf runs/example_network/
#fi

exit_code=0

if [[ "$gridsearch" -eq "1" ]]; then
	if [[ "$follow" -eq "1" ]]; then
		./omniopt \
			--send_anonymized_usage_stats \
			--partition=$PARTITION \
			--experiment_name=example_network_gridsearch \
			--mem_gb=$mem_gb \
			--time=$runtime \
			--worker_timeout=$worker_timeout \
			--max_eval=$max_eval \
			--num_parallel_jobs=$num_parallel_jobs \
			--gpus=$NUM_GPUS \
			--run_program=$(echo "bash $SCRIPT_DIR/example_network/run.sh --learning_rate=%(learning_rate) --epochs=%(epochs) --validation_split=%(validation_split) --width=%(width) --height=%(height) --dense=%(dense) --dense_units=%(dense_units) --conv=%(conv) --conv_filters=%(conv_filters)" | base64 -w 0)\
			--parameter width range 60 100 int \
			--parameter height range 60 100 int \
			--parameter validation_split range 0 0.4 float \
			--parameter learning_rate range 0.001 0.4 float \
			--parameter epochs range 1 $max_epochs int \
			--parameter dense range 10 20 int \
			--parameter dense_units range 10 20 int \
			--parameter conv range 10 20 int \
			--parameter conv_filters range 10 20 int \
			--hide_ascii_plots \
			--num_random_steps=$num_random_steps \
			--gridsearch \
			--follow
		exit_code=$?
	else

		./omniopt \
			--send_anonymized_usage_stats \
			--partition=$PARTITION \
			--experiment_name=example_network_gridsearch \
			--mem_gb=$mem_gb \
			--time=$runtime \
			--worker_timeout=$worker_timeout \
			--max_eval=$max_eval \
			--num_parallel_jobs=$num_parallel_jobs \
			--gpus=$NUM_GPUS \
			--run_program=$(echo "bash $SCRIPT_DIR/example_network/run.sh --learning_rate=%(learning_rate) --epochs=%(epochs) --validation_split=%(validation_split) --width=%(width) --height=%(height) --dense=%(dense) --dense_units=%(dense_units) --conv=%(conv) --conv_filters=%(conv_filters)" | base64 -w 0)\
			--parameter width range 60 100 int \
			--parameter height range 60 100 int \
			--parameter validation_split range 0 0.4 float \
			--parameter learning_rate range 0.001 0.4 float \
			--parameter dense range 10 20 int \
			--parameter dense_units range 10 20 int \
			--parameter conv range 10 20 int \
			--parameter conv_filters range 10 20 int \
			--hide_ascii_plots \
			--num_random_steps=$num_random_steps \
			--gridsearch \
			--parameter epochs range 1 $max_epochs int
		exit_code=$?
	fi

else

	if [[ "$follow" -eq "1" ]]; then
		./omniopt \
			--send_anonymized_usage_stats \
			--partition=$PARTITION \
			--experiment_name=example_network \
			--mem_gb=$mem_gb \
			--time=$runtime \
			--worker_timeout=$worker_timeout \
			--max_eval=$max_eval \
			--num_parallel_jobs=$num_parallel_jobs \
			--gpus=$NUM_GPUS \
			--run_program=$(echo "bash $SCRIPT_DIR/example_network/run.sh --learning_rate=%(learning_rate) --epochs=%(epochs) --validation_split=%(validation_split) --width=%(width) --height=%(height) --dense=%(dense) --dense_units=%(dense_units) --conv=%(conv) --conv_filters=%(conv_filters)" | base64 -w 0)\
			--parameter width range 60 100 int \
			--parameter height range 60 100 int \
			--parameter validation_split range 0 0.4 float \
			--parameter learning_rate range 0.001 0.4 float \
			--parameter epochs range 1 $max_epochs int \
			--parameter dense range 10 20 int \
			--parameter dense_units range 10 20 int \
			--parameter conv range 10 20 int \
			--parameter conv_filters range 10 20 int \
			--hide_ascii_plots \
			--num_random_steps=$num_random_steps \
			--follow
		exit_code=$?
	else

		./omniopt \
			--send_anonymized_usage_stats \
			--partition=$PARTITION \
			--experiment_name=example_network \
			--mem_gb=$mem_gb \
			--time=$runtime \
			--worker_timeout=$worker_timeout \
			--max_eval=$max_eval \
			--num_parallel_jobs=$num_parallel_jobs \
			--gpus=$NUM_GPUS \
			--run_program=$(echo "bash $SCRIPT_DIR/example_network/run.sh --learning_rate=%(learning_rate) --epochs=%(epochs) --validation_split=%(validation_split) --width=%(width) --height=%(height) --dense=%(dense) --dense_units=%(dense_units) --conv=%(conv) --conv_filters=%(conv_filters)" | base64 -w 0)\
			--parameter width range 60 100 int \
			--parameter height range 60 100 int \
			--parameter validation_split range 0 0.4 float \
			--parameter learning_rate range 0.001 0.4 float \
			--parameter dense range 10 20 int \
			--parameter dense_units range 10 20 int \
			--parameter conv range 10 20 int \
			--parameter conv_filters range 10 20 int \
			--hide_ascii_plots \
			--num_random_steps=$num_random_steps \
			--parameter epochs range 1 $max_epochs int
		exit_code=$?
	fi
fi

exit $exit_code
