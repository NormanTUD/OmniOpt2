#!/bin/bash

export ORIGINAL_PWD=$(pwd)

echo -ne "\033]30;OmniOpt\007"

set -e
set -o pipefail

function mycd () {
	#echo "cd $1"
	cd $1
}


slurmlogpath () {
	if command -v scontrol 2>/dev/null >/dev/null; then
		scontrol show job $1 | grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn} StdOut | sed -e 's/^\s*StdOut=//'
	fi
}

function echoerr() {
        echo "$@" 1>&2
}

function yellow_text {
	echoerr -e "\e\033[0;33m$1\e[0m"
}

function green_text {
	echoerr -e "\033[0;32m$1\e[0m"
}

function red_text {
	echoerr -e "\e[31m$1\e[0m"
}

function calltracer () {
	echo -ne "\033]30;$(basename $(pwd)): $(basename $SHELL)\007"
	yellow_text "Git status hash:"
	git rev-parse HEAD
        red_text 'Error occured in file/line:'
        caller
}

trap 'calltracer' ERR

minutes_to_hh_mm_ss() {
	var=$1

	number_re='^[0-9]+$'
	time_re='^[0-9]+:[0-9]+:[0-9]+$'

	if [[ $var =~ $number_re ]] ; then
		local total_minutes="$var"
		local hours=$(( total_minutes / 60 ))
		local minutes=$(( total_minutes % 60 ))
		local seconds=00

		printf "%02d:%02d:%02d\n" "$hours" "$minutes" "$seconds"
	elif [[ $var =~ $time_re ]]; then
		echo $var
	else
		red_text "ERROR: $var is not a valid input. Must be a number of minutes (digits) or HH:MM:SS"

		exit 103
	fi
}

int_re='^[+-]?[0-9]+$'

continue_previous_job=""
mem_gb=
gpus=
time=
experiment_name=
help=0
follow=0
debug=0
wait_until_ended=0
tests=0

args_string=""

args=("$@")
k=0
while [ $k -lt ${#args[@]} ]; do
	i="${args[k]}"

	case $i in
		--continue=*)
			old_continue=$continue_previous_job
			continue_previous_job="${i#*=}"

			if [[ ! -z $old_continue ]]; then
				red_text "--continue was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--continue=.*\s\s*# #')
			fi

			args_string+=" --continue $continue_previous_job "

			continue_previous_job=$continue_previous_job

			;;
		--continue)
			old_continue=$continue_previous_job

			shift
			k=$((k+1))

			continue_previous_job="${args[k]}"

			if [[ ! -z $old_continue ]]; then
				red_text "--continue was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--continue=.*\s\s*# #')
			fi

			args_string+=" --continue $continue_previous_job "

			continue_previous_job=$continue_previous_job

			;;

		--continue_previous_job=*)
			old_continue=$continue_previous_job
			continue_previous_job="${i#*=}"

			if [[ ! -z $old_continue ]]; then
				red_text "--continue was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--continue=.*\s\s*# #')
			fi

			args_string+=" --continue $continue_previous_job "

			continue_previous_job=$continue_previous_job

			;;

		--continue_previous_job)
			old_continue=$continue_previous_job

			shift
			k=$((k+1))

			continue_previous_job="${args[k]}"

			if [[ ! -z $old_continue ]]; then
				red_text "--continue was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--continue.*\s\s*# #')
			fi

			args_string+=" --continue $continue_previous_job "

			continue_previous_job=$continue_previous_job

			;;

		--mem_gb=*)
			old_mem_gb=$mem_gb
			mem_gb="${i#*=}"
			if ! [[ $mem_gb =~ $int_re ]] ; then
				red_text "error: --mem_gb not a INT: $i" >&2
				exit 100
			fi

			if [[ ! -z $old_mem_gb ]]; then
				red_text "--mem_gb was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--mem_gb=[0-9]*\s\s*# #')
			fi

			args_string+=" --mem_gb=$mem_gb "

			;;
		--mem_gb)
			old_mem_gb=$mem_gb

			shift
			k=$((k+1))

			mem_gb="${args[k]}"
			if ! [[ $mem_gb =~ $int_re ]] ; then
				red_text "error: --mem_gb not a INT: $i" >&2
				exit 100
			fi

			if [[ ! -z $old_mem_gb ]]; then
				red_text "--mem_gb was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--mem_gb=[0-9]*\s\s*# #')
			fi

			args_string+=" --mem_gb=$mem_gb "

			;;

		--gpus=*)
			old_gpus=$gpus
			gpus="${i#*=}"
			if ! [[ $gpus =~ $int_re ]] ; then
				red_text "error: --gpus not a INT: $i" >&2
				exit 100
			fi

			if [[ ! -z $old_gpus ]]; then
				red_text "--gpus was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--gpus=[0-9]*\s\s*# #')
			fi

			args_string+=" --gpus=$gpus "

			;;
		--gpus)
			old_gpus=$gpus

			shift

			k=$((k+1))
			gpus="${args[k]}"
			if ! [[ $gpus =~ $int_re ]] ; then
				red_text "error: --gpus not a INT: $i" >&2
				exit 100
			fi

			if [[ ! -z $old_gpus ]]; then
				red_text "--gpus was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--gpus=[0-9]*\s\s*# #')
			fi

			args_string+=" --gpus=$gpus "

			;;

		--experiment_name=*)
			old_experiment_name=$experiment_name
			experiment_name="${i#*=}"

			if [[ ! -z $old_experiment_name ]]; then
				red_text "--experiment_name was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--experiment_name=[0-9a-zA-Z_]*\s\s*# #')
			fi

			args_string+=" --experiment_name=$experiment_name "

			;;
		--experiment_name)
			old_experiment_name=$experiment_name

			shift

			k=$((k+1))
			experiment_name="${args[k]}"

			if [[ ! -z $old_experiment_name ]]; then
				red_text "--experiment_name was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--experiment_name=[0-9a-zA-Z_]*\s\s*# #')
			fi

			args_string+=" --experiment_name=$experiment_name "

			;;

		--time=*)
			old_time=$time
			time="${i#*=}"

			if [[ ! -z $old_time ]]; then
				red_text "--time was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--time=[0-9a-zA-Z_]*\s\s*# #')
			fi

			args_string+=" --time=$time "

			;;
		--time)
			old_time=$time

			shift

			k=$((k+1))
			time="${args[k]}"

			if [[ ! -z $old_time ]]; then
				red_text "--time was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--time=[0-9a-zA-Z_]*\s\s*# #')
			fi

			args_string+=" --time=$time "

			;;

		--tests)
			tests=1
			;;

		--follow)
			follow=1
			;;
		--wait_until_ended)
			wait_until_ended=1
			args_string+=" --wait_until_ended "
			;;
		-h)
			help=1
			args_string+=" --help "
			;;
		--help)
			help=1
			args_string+=" --help "
			;;
		--debug)
			debug=1
			;;

		*)
			args_string+=" $i "
			;;
	esac
	k=$((k+1))
done

if [[ "$debug" -eq "1" ]]; then
	set -x
fi

set +x
if [[ -d ".git" ]]; then
	if command -v whiptail 2>/dev/null >/dev/null; then
		if [[ ! -e .dont_ask_upgrade_omniopt ]]; then
			CURRENTHASH=$(git rev-parse HEAD)

			REMOTEURL=$(git config --get remote.origin.url)
			REMOTEHASH=$(git ls-remote $REMOTEURL HEAD | awk '{ print $1}')

			if [ ! "$CURRENTHASH" = "$REMOTEHASH" ]; then
				eval `resize`
				if (whiptail --title "There is a new version of OmniOpt available" --yesno "Do you want to upgrade?" $LINES $COLUMNS $(( $LINES - 8 ))); then
					git pull
					eval "./$SCRIPT_DIR/omniopt $args_string"
					exit
				else
					eval `resize`
					if (whiptail --title "Ask again?" --yesno "You chose not to upgrade. Ask again at next start?" $LINES $COLUMNS $(( $LINES - 8 ))); then
						echo "Asking again next time if you want to upgrade"
					else
						green_text "OK, not asking again"
						touch .dont_ask_upgrade_omniopt
					fi
				fi
			fi
		fi
	fi
fi

if [[ "$debug" -eq "1" ]]; then
	set -x
fi

args_string=$(echo "$args_string" | sed -e 's#\s\s*# #g')

if [[ -z $gpus ]]; then
	gpus=0
fi

if [[ $tests -eq 0 ]]; then
	if [[ $help -eq 0 ]] && command -v sbatch >/dev/null; then
		if [[ "$continue_previous_job" == "" ]]; then
			if [[ -z "$mem_gb" ]]; then
				red_text "Parameter --mem_gb is missing or empty";
				exit 101
			fi

			if [[ -z "$time" ]]; then
				red_text "Parameter --time is missing or empty";
				exit 102
			fi

			if [[ -z $experiment_name ]]; then
				red_text "Parameter --experiment_name is missing or empty"
				exit 104
			fi
		fi
	fi
fi

if [[ "$continue_previous_job" != "" ]]; then
	if [[ -z "$mem_gb" ]]; then
		if [[ -e "$continue_previous_job/mem_gb" ]]; then
			mem_gb=$(cat "$continue_previous_job/mem_gb")
		else
			echo "mem_gb could not be determined from previous run or --mem_gb"
			exit 105
		fi
	fi

	if [[ -z "$gpus" ]]; then
		if [[ -e "$continue_previous_job/gpus" ]]; then
			gpus=$(cat "$continue_previous_job/gpus")
		else
			echo "gpus could not be determined from previous run or --gpus"
			exit 105
		fi
	fi

	if [[ -z "$time" ]]; then
		if [[ -e "$continue_previous_job/time" ]]; then
			time=$(cat "$continue_previous_job/time")
		else
			echo "Time could not be determined from previous run or --time"
			exit 105
		fi
	fi
fi

sent_usr_signal_to_script=0
python_pid=

JOB_START_TIME=$SLURM_JOB_START_TIME
JOB_END_TIME=$SLURM_JOB_END_TIME

run_before_end () {
	if command -v sbatch >/dev/null; then
		sleep_time=$((JOB_END_TIME - JOB_START_TIME - 30))
		# Überprüfen, ob die Zeitdifferenz positiv ist, um zu vermeiden, dass das Skript im negativen Bereich schläft
		if [ $sleep_time -gt 0 ]; then
			sleep $sleep_time

			if [[ $sent_usr_signal_to_script -eq 0 ]]; then
				sent_usr_signal_to_script=1
				kill -USR1 "$python_pid"
			else
				echo "Already sent user signal to python PID $python_pid. Not doing that again."
			fi
		else
			echo "It is recommended that you run this in a slurm job."
		fi
	fi
}

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

if [ -n "${SLURM_JOB_ID:-}" ] ; then
	set +e
	SLURM_FILE_SCRIPT_DIR=$(scontrol show job "$SLURM_JOB_ID" | awk -F= '/Command=/{print $2}')
	SLURM_FILE_SCRIPT_DIR=$(dirname $SLURM_FILE_SCRIPT_DIR)
	set -e

	if [[ -d $SLURM_FILE_SCRIPT_DIR ]]; then
		SCRIPT_DIR="$SLURM_FILE_SCRIPT_DIR"
	else
		echo "SLURM_FILE_SCRIPT_DIR $SLURM_FILE_SCRIPT_DIR not found, even though SLURM_JOB_ID exists ($SLURM_JOB_ID). Using SCRIPT_DIR=$SCRIPT_DIR"
	fi
fi

set +x
source $SCRIPT_DIR/.shellscript_functions

mycd "$ORIGINAL_PWD"
if [[ "$debug" -eq "1" ]]; then
	set -x
fi

if [[ "$help" -eq "1" ]]; then
	python3 $SCRIPT_DIR/.omniopt.py --help
	exit 0
fi

if [[ "$tests" -eq "1" ]]; then
	python3 $SCRIPT_DIR/.omniopt.py --tests --num_parallel_jobs=1 --max_eval=1 --worker_timeout=1 --run_program "" --experiment_name ""
	exit $?
fi

kill_tail_when_squeue_job_empty () {
	JOB_ID=$1

	sleep 10

	while squeue -u $USER | grep "$JOB_ID" 2>/dev/null >/dev/null; do
		sleep 5
	done

	sleep 10

	for child in $(pgrep -P $$); do
		for tail_process in $(ps auxf | grep $child | grep tail | sed -e "s#^$USER\s*##" -e 's#\s.*##'); do
			kill -9 $tail_process
		done
	done

	return 0
}

if [ -n "${SLURM_JOB_ID:-}" ] || ! command -v sbatch >/dev/null; then
	# To start all subjobs indenpedently from the omniopt job, unset all SLURM variables
	set +x
	for i in $(env | egrep "^SLURM" | sed -e 's#\s*=.*##' | grep -v SLURM_JOB_ID | grep -v SBATCH_RESERVATION); do
		unset $i
	done

	if [[ "$debug" -eq "1" ]]; then
		set -x
	fi

	if [[ ! -z $SLURM_JOB_ID ]]; then
		echo -e "To cancel, use '\e[31mscancel $SLURM_JOB_ID\e[0m'"
	fi

	IFS=$' '
	export PYTHONPATH=$SCRIPT_DIR:$PYTHONPATH
	#echo "python3 $SCRIPT_DIR/.omniopt.py $args_string"

	run_before_end &

	set +e
	python3 $SCRIPT_DIR/.omniopt.py $args_string
	set -e

	EXIT_CODE=$?

	tput bel

	exit $EXIT_CODE
else
	IFS=$' '

	formatted_time=$(minutes_to_hh_mm_ss $time)

	sbatch_result=""
	exit_code=""

	if [[ $gpus -ne 0 ]]; then
		sbatch_result=$(sbatch --job-name "$experiment_name" --time=$formatted_time --mem=${mem_gb}GB --gres=gpu:$gpus $SCRIPT_DIR/omniopt $args_string | tee /dev/stderr)
		exit_code=$?
	else
		sbatch_result=$(sbatch --job-name "$experiment_name" --time=$formatted_time --mem=${mem_gb}GB $SCRIPT_DIR/omniopt $args_string | tee /dev/stderr)
		exit_code=$?
	fi

	started_job_nr=$(echo "$sbatch_result" | sed -e 's#.*\s##')

	if [[ $exit_code -eq 0 ]]; then
		if [[ $follow -eq 1 ]]; then
			if command -v sbatch 2>/dev/null >/dev/null; then
				LOG_PATH=$(slurmlogpath $started_job_nr)
	
				spin[0]="-"
				spin[1]="\\" # "
				spin[2]="|"
				spin[3]="/"

				set +x

				echo -n "Waiting until the path $LOG_PATH exists. When it does, it will automatically be followed. CTRL-c does NOT cancel the optimization, only the tail...  "

				while ! [[ -e $LOG_PATH ]]; do
					for i in "${spin[@]}"; do
						echo -ne "\b$i"
						sleep 0.1
					done
				done

				if [[ "$debug" -eq 1 ]]; then
					set -x
				fi

				printf "\r"

				tput el

				if [[ -e "$LOG_PATH" ]]; then
					set +x
					kill_tail_when_squeue_job_empty $started_job_nr &
					# weird exec stuff for disabling the "Terminated" message coming from kill
					exec 3>&2          # 3 is now a copy of 2
					exec 2> /dev/null  # 2 now points to /dev/null
					tail -n1000000 -f $LOG_PATH || true
					exec 2>&3          # restore stderr to saved
					exec 3>&-          # close saved version
					if [[ "$debug" -eq "1" ]]; then
						set -x
					fi
				else
					red_text "$LOG_PATH could not be found"
				fi
			fi
		elif [[ "$wait_until_ended" -eq "1" ]]; then
			if command -v squeue 2>/dev/null >/dev/null; then
				WAIT_NUM_SECONDS=10
				yellow_text "Waiting for job $started_job_nr to end... (Checking every $WAIT_NUM_SECONDS seconds)"

				set +x

				seconds_count=0

				echo ""

				while [[ "$(squeue --me | grep $started_job_nr | wc -l)" -ne "0" ]]; do
					sleep $WAIT_NUM_SECONDS
				done

				echo ""

				if [[ "$debug" -eq 1 ]]; then
					set -x
				fi

				yellow_text "Done waiting for job to end"

				LOG_PATH=$(slurmlogpath $started_job_nr)
				if [[ -e "$LOG_PATH" ]]; then
					cat $LOG_PATH
				else
					red_text "$LOG_PATH could not be found"
				fi
			else
				red_text "squeue not found. Cannot wait for job to end."
			fi
		fi
	else
		red_text "Failed to start sbatch job. Exit-Code: $exit_code"

		exit $exit_code
	fi

fi

echo -ne "\033]30;$(basename $(pwd)): $(basename $SHELL)\007"
