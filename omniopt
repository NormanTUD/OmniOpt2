#!/bin/bash

debug=0
main_process_gb=4

function echoerr {
	echo "$@" 1>&2
}

function yellow_text {
	echoerr -e "\e\033[0;33m$1\e[0m"
}

function green_text {
	echoerr -e "\033[0;32m$1\e[0m"
}

function red_text {
	echoerr -e "\e[31m$1\e[0m"
}

function _tput {
	set +e
	CHAR=$1

	if ! command -v tput 2>/dev/null >/dev/null; then
		red_text "tput not installed" >&2
		set +e
		return 0
	fi

	if [[ -z $CHAR ]]; then
		red_text "No character given" >&2
		set +e
		return 0
	fi

	if ! tty 2>/dev/null >/dev/null; then
		echo ""
		set +e
		return 0
	fi

	tput $CHAR
	set +e
}

# Idea for how this works and is implemented technically:
# This main script that is supposed to be called is a bash script.
# Step 1:
# It checks whether the environment already exists, and
# if so, loads it.
# If it doesn't exist. it creates it in 
# ~/.omniax_$(uname -m)_$(python3 --version | sed -e 's# #_#g')
# i.e. e.g. ~/.omniax_x86_64_Python_3.11.2/ . This is done so that there
# is no need for multiple installations, so that, once installed, it doesn't 
# need to be installed again.
# Then it installs all modules. Then it loads the environment and the job
# continues. It also does pip freeze to check if new modules need to be
# installed and if the environment already exists, but the new modules are 
# missing, they will be installed automatically.
# These steps are skipped, when you installed it as a module. Then,
# the module environment is the used environment.
# Step 2:
# It checks whether sbatch is installed. If so, it will re-start
# itself as a bascript in a slurmjob.
# If not, the python-script with the parsed parameters are run directly.
# Otherwise, the python-script is started inside the sbatch-script,
# which's end is awaited (by checking squeue every 10 seconds in the
# background if the started job is still there, and, if --follow is
# defined, a tail -f on the slurm.out file is loaded in the foreground).
# This way, the whole slurm procedure is transparent to the user,
# and the program looks basically the same on every device.
# This logic is defined in .shellscript_functions

int_re='^[+-]?[0-9]+$'

if [[ ! -z $PRINT_SEPERATOR ]]; then # for tests, so that things are properly visually seperated
	echo ""
	echo "========================================================================"
	echo ""
fi

SEND_USAGE_STATS=0

function myexit {
	CODE=$1

	if [[ -z $CODE ]] || ! [[ $CODE =~ $int_re ]]; then
		send_status_report -1
	else
		send_status_report $CODE
	fi

	exit $CODE
}

function send_status_report {
	exit_code=$1

	if [[ $SEND_USAGE_STATS -eq "1" ]] && [[ -z $SLURM_JOB_ID ]]; then
		BASEURL="https://imageseg.scads.de/omniax"

		if [[ -e "$HOME/.oo_base_url" ]]; then
			BASEURL=$(cat $HOME/.oo_base_url)
			yellow_text "$HOME/.oo_base_url exists. Using base-url $BASEURL as base url for sending anonymized user statistics."
		fi


		if [[ -e /etc/machine-id ]]; then
			anon_user=$(echo "user=$USER|hostname=$(hostname)|machine-id=$(cat /etc/machine-id)" | md5sum | sed -e 's#\s.*##')
			if ! [[ -z $ITWORKSONMYMACHINE ]]; then
				anon_user="affeaffeaffeaffeaffeaffeaffeaffe"
			fi

			if ! [[ -z $OO_MAIN_TESTS ]]; then
				anon_user="affed00faffed00faffed00faffed00f"
			fi
			has_sbatch=0
			run_uuid=$(uuidgen)

			stats_params="anon_user=$anon_user&has_sbatch=$has_sbatch&run_uuid=$run_uuid&git_hash=$git_hash&exit_code=$exit_code&runtime=$SECONDS"
			url="$BASEURL/usage_stats.php?$stats_params"

			curl -s $url 2>/dev/null >/dev/null

			if [[ "$debug" -eq "1" ]]; then
				yellow_text "Curling $url"
			fi

			mkdir -p $ORIGINAL_PWD/.logs
			echo "Curling $url" >> $ORIGINAL_PWD/.logs/user_stat_curls
		else
			yellow_text "Cannot find /etc/machine-id. Not sending anonymized usage statistics."
		fi
	else
		echo "Not sending anonymized user statistics"
	fi
}

if command -v sbatch 2>/dev/null >/dev/null; then
	has_sbatch=1
fi


export NO_WHIPTAIL=1

function displaytime {
	set +x
	local T=$1
		local D=$((T/60/60/24))
		local H=$((T/60/60%24))
		local M=$((T/60%60))
		local S=$((T%60))
		(( $D > 0 )) && printf '%d days ' $D
		(( $H > 0 )) && printf '%d hours ' $H
		(( $M > 0 )) && printf '%d minutes ' $M
		(( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
		printf '%d seconds\n' $S
}

function remaining_time {
	target_date="$1"
	target_date=$(echo "$target_date" | sed -E 's/\x1b\[[0-9;]*m//g')

	target_epoch=$(date -d "$target_date" +%s)

	current_epoch=$(date +%s)

	difference=$(( target_epoch - current_epoch ))

	if [ $difference -lt 0 ]; then
		return
	fi

	difference_minutes=$(( difference / 60 ))

	if [ $difference_minutes -lt 30 ]; then
		minutes=$difference_minutes
		if [ $minutes -eq 1 ]; then
			result="in about $minutes minute"
		else
			result="in about $minutes minutes"
		fi
		echo "$result"
		return
	fi

	difference_rounded=$(( (difference + 299) / 300 * 5 ))

	minutes=$(( difference_rounded % 60 ))
	hours=$(( (difference_rounded / 60) % 24 ))
	days=$(( (difference_rounded / 1440) % 365 ))
	years=$(( difference_rounded / 525600 ))

	result=""
	if [ $years -gt 0 ]; then
		year_str="year"
		if [ $years -gt 1 ]; then
			year_str="years"
		fi
		result="$result $years $year_str"
	fi

	if [ $days -gt 0 ]; then
		day_str="day"
		if [ $days -gt 1 ]; then
			day_str="days"
		fi
		if [ -n "$result" ]; then
			result="$result and"
		fi
		result="$result $days $day_str"
	fi

	if [ $hours -gt 0 ]; then
		hour_str="hour"
		if [ $hours -gt 1 ]; then
			hour_str="hours"
		fi
		if [ -n "$result" ]; then
			result="$result and"
		fi
		result="$result $hours $hour_str"
	fi

	if [ $minutes -gt 0 ]; then
		minute_str="minute"
		if [ $minutes -gt 1 ]; then
			minute_str="minutes"
		fi
		if [ -n "$result" ]; then
			result="$result and"
		fi
		result="$result $minutes $minute_str"
	fi

	if [ -n "$result" ]; then
		result="in about $result"
		echo "$result"
	fi
}

#SBATCH --signal=B:USR1@200

export CUDA_DEVICE_ORDER=PCI_BUS_ID
export ORIGINAL_PWD=$(pwd)

set -e
set -o pipefail

function mycd {
	#echo "cd $1"
	cd $1
}


slurmlogpath () {
	if command -v scontrol 2>/dev/null >/dev/null; then
		scontrol show job $1 | grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn} StdOut | sed -e 's/^\s*StdOut=//'
	fi
}

function calltracer {
	LINE_AND_FUNCTION=$(caller)
	if [[ "$LINE_AND_FUNCTION" != *"./omniopt"* ]] && [[ "$LINE_AND_FUNCTION" != *"./.tests/main_tests"* ]]; then
		red_text "Error occured in file/line: $LINE_AND_FUNCTION"
	fi

	echo ""
	caller
	echo "Runtime (calltracer): $(displaytime $SECONDS), PID: $$"
	_tput bel
}

already_sent_signal=

kill_python_if_started () {
	REASON=$1
	echo "kill_python_if_started $REASON"
	re='^[0-9]+$'
	if ! [[ -z "$SLURM_JOB_ID" ]]; then
		if [[ $python_pid =~ $re ]] ; then
			if [[ -z "$already_sent_signal" ]]; then
				if ps auxf | grep $python_pid 2>/dev/null >/dev/null; then
					already_sent_signal=1
					echo -e "\nSending USR1 to $python_pid (python). Reason: $REASON"
					kill -USR1 "$python_pid"
				else
					echo "Could not find $python_pid process" >&2
				fi
			fi
		fi
	fi

	echo "Runtime (kill_python_if_started): $(displaytime $SECONDS), PID: $$"
	_tput bel
}

trap 'calltracer' ERR
trap 'kill_python_if_started CONT' CONT
trap 'kill_python_if_started TERM' TERM

for i in $(kill -l 2>&1 | sed -e 's#[0-9][0-9]*\s*)##g'); do
	if
		[[ "$i" != "ERR" ]] &&
		[[ "$i" != "CONT" ]] &&
		[[ "$i" != "TERM" ]] &&
		[[ "$i" != "CHLD" ]] &&
		[[ "$i" != "SIGCHLD" ]] &&
		[[ "$i" != "SIGWINCH" ]] &&
		[[ "$i" != "WINCH" ]] &&
		[[ "$i" != "INT" ]] &&
		[[ "$i" != "SIGINT" ]];
	then
		trap "kill_python_if_started $i" $i
	fi
done

minutes_to_hh_mm_ss() {
	var=$1

	number_re='^[0-9]+$'
	time_re='^[0-9]+:[0-9]+:[0-9]+$'

	if [[ $var =~ $number_re ]] ; then
		local total_minutes="$var"
		local hours=$(( total_minutes / 60 ))
		local minutes=$(( total_minutes % 60 ))
		local seconds=00

		printf "%02d:%02d:%02d\n" "$hours" "$minutes" "$seconds"
	elif [[ $var =~ $time_re ]]; then
		echo $var
	else
		red_text "ERROR: $var is not a valid input. Must be a number of minutes (digits) or HH:MM:SS"

		myexit 103
	fi
}

continue_previous_job=""
mem_gb=
gpus=
time=
if [[ -z $root_venv_dir ]]; then
	root_venv_dir=$HOME
fi
experiment_name=
help=0
follow=0
wait_until_ended=0
tests=0

continue_was_set=0

args_string=""

args=("$@")
k=0

while [ $k -lt ${#args[@]} ]; do
	i="${args[k]}"

	case $i in
		--continue=*)
			old_continue=$continue_previous_job
			continue_previous_job="${i#*=}"

			if [[ ! -z $old_continue ]]; then
				red_text "--continue was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--continue=.*\s\s*# #')
			fi

			args_string+=" --continue $continue_previous_job "

			continue_previous_job=$continue_previous_job
			continue_was_set=1

			;;
		--continue)
			old_continue=$continue_previous_job

			shift
			k=$((k+1))

			continue_previous_job="${args[k]}"

			if [[ ! -z $old_continue ]]; then
				red_text "--continue was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--continue=.*\s\s*# #')
			fi

			args_string+=" --continue $continue_previous_job "

			continue_previous_job=$continue_previous_job
			continue_was_set=1

			;;


		--account=*)
			old_continue=$account
			account="${i#*=}"

			if [[ ! -z $old_continue ]]; then
				red_text "--account was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--account=.*\s\s*# #')
			fi

			args_string+=" --account=$account "

			account=$account

			;;

		--account)
			old_continue=$account

			shift
			k=$((k+1))

			account="${args[k]}"

			if [[ ! -z $old_continue ]]; then
				red_text "--account was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--account.*\s\s*# #')
			fi

			args_string+=" --account=$account "

			account=$account
			;;

		--reservation=*)
			old_continue=$reservation
			reservation="${i#*=}"

			if [[ ! -z $old_continue ]]; then
				red_text "--reservation was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--reservation=.*\s\s*# #')
			fi

			args_string+=" --reservation=$reservation "

			reservation=$reservation

			;;

		--reservation)
			old_continue=$reservation

			shift
			k=$((k+1))

			reservation="${args[k]}"

			if [[ ! -z $old_continue ]]; then
				red_text "--reservation was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--reservation.*\s\s*# #')
			fi

			args_string+=" --reservation=$reservation "

			reservation=$reservation

			;;

		--continue_previous_job=*)
			old_continue=$continue_previous_job
			continue_previous_job="${i#*=}"

			if [[ ! -z $old_continue ]]; then
				red_text "--continue was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--continue=.*\s\s*# #')
			fi

			args_string+=" --continue $continue_previous_job "

			continue_previous_job=$continue_previous_job
			continue_was_set=1

			;;

		--continue_previous_job)
			old_continue=$continue_previous_job

			shift
			k=$((k+1))

			continue_previous_job="${args[k]}"

			if [[ ! -z $old_continue ]]; then
				red_text "--continue was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--continue.*\s\s*# #')
			fi

			args_string+=" --continue $continue_previous_job "

			continue_previous_job=$continue_previous_job
			continue_was_set=1

			;;

		--main_process_gb=*)
			old_main_process_gb=$main_process_gb
			main_process_gb="${i#*=}"
			if ! [[ $main_process_gb =~ $int_re ]] ; then
				red_text "error: --main_process_gb not a INT: $i" >&2
				myexit 100
			fi

			if [[ ! -z $old_main_process_gb ]]; then
				red_text "--main_process_gb was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--main_process_gb=[0-9]*\s\s*# #')
			fi

			args_string+=" --main_process_gb=$main_process_gb "

			;;
		--main_process_gb)
			old_main_process_gb=$main_process_gb

			shift
			k=$((k+1))

			main_process_gb="${args[k]}"
			if ! [[ $main_process_gb =~ $int_re ]] ; then
				red_text "error: --main_process_gb not a INT: $i" >&2
				myexit 100
			fi

			if [[ ! -z $old_main_process_gb ]]; then
				red_text "--main_process_gb was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--main_process_gb=[0-9]*\s\s*# #')
			fi

			args_string+=" --main_process_gb=$main_process_gb "

			;;

		--mem_gb=*)
			old_mem_gb=$mem_gb
			mem_gb="${i#*=}"
			if ! [[ $mem_gb =~ $int_re ]] ; then
				red_text "error: --mem_gb not a INT: $i" >&2
				myexit 100
			fi

			if [[ ! -z $old_mem_gb ]]; then
				red_text "--mem_gb was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--mem_gb=[0-9]*\s\s*# #')
			fi

			args_string+=" --mem_gb=$mem_gb "

			;;
		--mem_gb)
			old_mem_gb=$mem_gb

			shift
			k=$((k+1))

			mem_gb="${args[k]}"
			if ! [[ $mem_gb =~ $int_re ]] ; then
				red_text "error: --mem_gb not a INT: $i" >&2
				myexit 100
			fi

			if [[ ! -z $old_mem_gb ]]; then
				red_text "--mem_gb was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--mem_gb=[0-9]*\s\s*# #')
			fi

			args_string+=" --mem_gb=$mem_gb "

			;;

		--gpus=*)
			old_gpus=$gpus
			gpus="${i#*=}"
			if ! [[ $gpus =~ $int_re ]] ; then
				red_text "error: --gpus not a INT: $i" >&2
				myexit 100
			fi

			if [[ ! -z $old_gpus ]]; then
				red_text "--gpus was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--gpus=[0-9]*\s\s*# #')
			fi

			args_string+=" --gpus=$gpus "

			;;
		--gpus)
			old_gpus=$gpus

			shift

			k=$((k+1))
			gpus="${args[k]}"
			if ! [[ $gpus =~ $int_re ]] ; then
				red_text "error: --gpus not a INT: $i" >&2
				myexit 100
			fi

			if [[ ! -z $old_gpus ]]; then
				red_text "--gpus was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--gpus=[0-9]*\s\s*# #')
			fi

			args_string+=" --gpus=$gpus "

			;;

		--experiment_name=*)
			old_experiment_name=$experiment_name
			experiment_name="${i#*=}"

			if [[ ! -z $old_experiment_name ]]; then
				red_text "--experiment_name was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--experiment_name=[0-9a-zA-Z_]*\s\s*# #')
			fi

			args_string+=" --experiment_name=$experiment_name "

			;;
		--experiment_name)
			old_experiment_name=$experiment_name

			shift

			k=$((k+1))
			experiment_name="${args[k]}"

			if [[ ! -z $old_experiment_name ]]; then
				red_text "--experiment_name was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--experiment_name=[0-9a-zA-Z_]*\s\s*# #')
			fi

			args_string+=" --experiment_name=$experiment_name "

			;;



		--root_venv_dir=*)
			root_venv_dir="${i#*=}"

			args_string+=" --root_venv_dir=$root_venv_dir "

			export root_venv_dir

			;;
		--root_venv_dir)
			shift

			k=$((k+1))
			root_venv_dir="${args[k]}"

			args_string+=" --root_venv_dir=$root_venv_dir "

			export root_venv_dir

			;;


		--time=*)
			old_time=$time
			time="${i#*=}"

			if [[ ! -z $old_time ]]; then
				red_text "--time was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--time=[0-9a-zA-Z_]*\s\s*# #')
			fi

			args_string+=" --time=$time "

			;;
		--time)
			old_time=$time

			shift

			k=$((k+1))
			time="${args[k]}"

			if [[ ! -z $old_time ]]; then
				red_text "--time was specified more than once. Using the last one."
				args_string=$(echo "$args_string" | sed -e 's#\s*--time=[0-9a-zA-Z_]*\s\s*# #')
			fi

			args_string+=" --time=$time "

			;;

		--tests)
			tests=1
			;;

		--send_anonymized_usage_stats)
			SEND_USAGE_STATS=1
			;;
		--follow)
			follow=1
			;;
		--wait_until_ended)
			wait_until_ended=1
			args_string+=" --wait_until_ended "
			;;
		-h)
			help=1
			args_string+=" --help "
			;;
		--help)
			help=1
			args_string+=" --help "
			;;
		--debug)
			debug=1
			;;

		*)
			args_string+=" $i "
			;;
	esac
	k=$((k+1))
done

if [[ "$debug" -eq "1" ]]; then
	set -x
fi

git_hash="NOT_DETERMININABLE"

if ! command -v git 2>/dev/null >/dev/null; then
	red_text "git not found. Cannot continue."
	exit 11
fi

if [[ -e git_hash ]]; then
	new_git_hash=$(cat git_hash)
else
	new_git_hash=$(git rev-parse HEAD)
fi

if [[ ! -z $new_git_hash ]]; then
	git_hash=$new_git_hash
fi

if [[ -z "$SLURM_JOB_ID" ]]; then
	echo "Current git-hash: $git_hash"
fi

if [[ $continue_was_set -eq 1 ]] && [[ -z $continue_previous_job ]]; then
	echo "--continue was set, but empty."
	exit 19
fi

set +x
if [[ -d ".git" ]]; then
	if command -v whiptail 2>/dev/null >/dev/null; then
		if [[ ! -e .dont_ask_upgrade_omniopt ]]; then
			REMOTEURL=$(git config --get remote.origin.url)
			REMOTEHASH=$(git ls-remote $REMOTEURL HEAD | awk '{ print $1}')

			if [ ! "$git_hash" = "$REMOTEHASH" ]; then
				if command -v resize 2>/dev/null >/dev/null; then
					eval `resize`
				fi
				if (whiptail --title "There is a new version of OmniOpt available" --yesno "Do you want to upgrade?" $LINES $COLUMNS $(( $LINES - 8 ))); then
					git pull
					eval "./$SCRIPT_DIR/omniopt $args_string"
					exit
				else
					if command -v resize 2>/dev/null >/dev/null; then
						eval `resize`
					fi
					if (whiptail --title "Ask again?" --yesno "You chose not to upgrade. Ask again at next start?" $LINES $COLUMNS $(( $LINES - 8 ))); then
						echo "Asking again next time if you want to upgrade"
					else
						green_text "OK, not asking again"
						touch .dont_ask_upgrade_omniopt
					fi
				fi
			fi
		fi
	fi
fi

if [[ "$debug" -eq "1" ]]; then
	set -x
fi

args_string=$(echo "$args_string" | sed -e 's#\s\s*# #g')

if [[ -z $gpus ]]; then
	gpus=0
fi

if [[ $tests -eq 0 ]]; then
	if [[ $help -eq 0 ]] && command -v sbatch >/dev/null; then
		if [[ "$continue_previous_job" == "" ]]; then
			if [[ -z "$mem_gb" ]]; then
				red_text "Parameter --mem_gb is missing or empty";
				myexit 104
			fi

			if [[ -z "$time" ]]; then
				red_text "Parameter --time is missing or empty";
				myexit 104
			fi

			if [[ -z $experiment_name ]]; then
				red_text "Parameter --experiment_name is missing or empty"
				myexit 104
			fi
		fi
	fi
fi

if [[ "$continue_previous_job" != "" ]]; then
	if [[ ! -d "$continue_previous_job" ]]; then
		echo "The folder $continue_previous_job was not found"
		myexit 105
	fi

	if [[ -z "$mem_gb" ]]; then
		if [[ -e "$continue_previous_job/state_files/mem_gb" ]]; then
			mem_gb=$(cat "$continue_previous_job/state_files/mem_gb")
		else
			echo "mem_gb could not be determined from previous run or --mem_gb"
			myexit 105
		fi
	fi

	if [[ -z "$gpus" ]]; then
		if [[ -e "$continue_previous_job/state_files/gpus" ]]; then
			gpus=$(cat "$continue_previous_job/state_files/gpus")
		else
			echo "gpus could not be determined from previous run or --gpus"
			myexit 105
		fi
	fi

	if [[ -z "$time" ]]; then
		if [[ -e "$continue_previous_job/state_files/time" ]]; then
			time=$(cat "$continue_previous_job/state_files/time")
		else
			echo "Time could not be determined from previous run or --time"
			myexit 105
		fi
	fi
fi

python_pid=""

JOB_START_TIME=$SLURM_JOB_START_TIME
JOB_END_TIME=$SLURM_JOB_END_TIME

run_before_end () {
	if [[ -z "$already_sent_signal" ]]; then
		if command -v sbatch >/dev/null; then
			# Weird solution, but signals never reached for some reason, and this... works?
			sleep_time=$((JOB_END_TIME - JOB_START_TIME - 100))
			# Überprüfen, ob die Zeitdifferenz positiv ist, um zu vermeiden, dass das Skript im negativen Bereich schläft
			if [ $sleep_time -gt 0 ]; then
				sleep $sleep_time

				kill_python_if_started "Timeout"
			else
				echo "It is recommended that you run this in a slurm job."
			fi
		fi
	fi
}

#SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
SCRIPT_DIR=$(dirname $(realpath $0))

#echo "\$0: $0, SCRIPT_DIR: $SCRIPT_DIR"

if [ -n "${SLURM_JOB_ID:-}" ] ; then
	set +e
	if command -v scontrol 2>/dev/null >/dev/null; then
		SLURM_FILE_SCRIPT_DIR=$(scontrol show job "$SLURM_JOB_ID" | awk -F= '/Command=/{print $2}')
		#echo "scontrol show job $SLURM_JOB_ID: exited with $?"
		SLURM_FILE_SCRIPT_DIR=$(dirname $SLURM_FILE_SCRIPT_DIR)

		if [[ -d $SLURM_FILE_SCRIPT_DIR ]] && [[ -e "$SLURM_FILE_SCRIPT_DIR/.shellscript_functions" ]]; then
			SCRIPT_DIR="$SLURM_FILE_SCRIPT_DIR"
		else
			echo "SLURM_FILE_SCRIPT_DIR $SLURM_FILE_SCRIPT_DIR not found, even though SLURM_JOB_ID exists ($SLURM_JOB_ID). Using SCRIPT_DIR=$SCRIPT_DIR"
		fi
	else
		red_text "scontrol not found. Unsetting SLURM_JOB_ID"
		unset SLURM_JOB_ID
	fi
	set -e
fi

set +x
if [[ -e $SCRIPT_DIR/.shellscript_functions ]]; then
	#echo "source $SCRIPT_DIR/.shellscript_functions"
	source $SCRIPT_DIR/.shellscript_functions
else
	red_text "$SCRIPT_DIR/.shellscript_functions not found. Cannot continue."
	exit 2
fi

if [[ "$debug" -eq "1" ]]; then
	set -x
fi

mycd "$ORIGINAL_PWD"

if [[ "$help" -eq "1" ]]; then
	python3 $SCRIPT_DIR/.omniopt.py --help
	exit 0
fi

if [[ "$tests" -eq "1" ]]; then
	python3 $SCRIPT_DIR/.omniopt.py --tests --num_parallel_jobs=1 --max_eval=1 --worker_timeout=1 --run_program "" --experiment_name ""
	exit $?
fi

kill_tail_when_squeue_job_empty () {
	JOB_ID=$1

	sleep 10

	while squeue -u $USER | grep "$JOB_ID" 2>/dev/null >/dev/null; do
		sleep 5
	done

	sleep 10

	for child in $(pgrep -P $$); do
		for tail_process in $(ps auxf | grep $child | grep tail | sed -e "s#^$USER\s*##" -e 's#\s.*##'); do
			kill -9 $tail_process
		done
	done

	return 0
}

if [ -n "${SLURM_JOB_ID:-}" ] || ! command -v sbatch >/dev/null; then
	# To start all subjobs indenpedently from the omniopt job, unset all SLURM variables
	set +x
	for i in $(env | egrep "^SLURM" | sed -e 's#\s*=.*##' | grep -v SLURM_JOB_ID | grep -v SBATCH_RESERVATION); do
		unset $i
	done

	if [[ "$debug" -eq "1" ]]; then
		set -x
	fi

	if [[ ! -z $SLURM_JOB_ID ]]; then
		echo -e "To cancel, press \033[1mCTRL\e[0m \033[1mc\e[0m, then run '\e[31mscancel $SLURM_JOB_ID\e[0m'"
	fi

	IFS=$' '
	export PYTHONPATH=$SCRIPT_DIR:$PYTHONPATH
	#echo "python3 $SCRIPT_DIR/.omniopt.py $args_string"

	#run_before_end &

	set +e
	python3 $SCRIPT_DIR/.omniopt.py $args_string &
	python_pid=$!

	set +x
	wait $python_pid

	EXIT_CODE=$?

	set -e

	_tput bel

	myexit $EXIT_CODE
else
	IFS=$' '

	formatted_time=$(minutes_to_hh_mm_ss $time)

	sbatch_result=""
	exit_code=""

	if [[ $gpus -ne 0 ]]; then
		if [[ -z $account ]]; then
			if [[ -z $reservation ]]; then
				sbatch_result=$(sbatch --mem=${main_process_gb}GB -N 1 --job-name "$experiment_name" --time=$formatted_time --gres=gpu:$gpus $SCRIPT_DIR/omniopt $args_string | tee /dev/stderr)
				exit_code=$?
			else
				sbatch_result=$(sbatch --mem=${main_process_gb}GB -N 1 --reservation=$reservation --job-name "$experiment_name" --time=$formatted_time --gres=gpu:$gpus $SCRIPT_DIR/omniopt $args_string | tee /dev/stderr)
				exit_code=$?
			fi
		else
			if [[ -z $reservation ]]; then
				sbatch_result=$(sbatch --mem=${main_process_gb}GB -N 1 --account=$account --job-name "$experiment_name" --time=$formatted_time --gres=gpu:$gpus $SCRIPT_DIR/omniopt $args_string | tee /dev/stderr)
				exit_code=$?
			else
				sbatch_result=$(sbatch --mem=${main_process_gb}GB -N 1 --account=$account --reservation=$reservation --job-name "$experiment_name" --time=$formatted_time --gres=gpu:$gpus $SCRIPT_DIR/omniopt $args_string | tee /dev/stderr)
				exit_code=$?
			fi
		fi
	else
		if [[ -z $account ]]; then
			if [[ -z $reservation ]]; then
				sbatch_result=$(sbatch --mem=${main_process_gb}GB -N 1 --job-name "$experiment_name" --time=$formatted_time $SCRIPT_DIR/omniopt $args_string | tee /dev/stderr)
				exit_code=$?
			else
				sbatch_result=$(sbatch --mem=${main_process_gb}GB -N 1 --reservation=$reservation --job-name "$experiment_name" --time=$formatted_time $SCRIPT_DIR/omniopt $args_string | tee /dev/stderr)
				exit_code=$?
			fi
		else
			if [[ -z $reservation ]]; then
				sbatch_result=$(sbatch --mem=${main_process_gb}GB -N 1 --account=$account --job-name "$experiment_name" --time=$formatted_time $SCRIPT_DIR/omniopt $args_string | tee /dev/stderr)
				exit_code=$?
			else
				sbatch_result=$(sbatch --mem=${main_process_gb}GB -N 1 --account=$account --reservation=$reservation --job-name "$experiment_name" --time=$formatted_time $SCRIPT_DIR/omniopt $args_string | tee /dev/stderr)
				exit_code=$?
			fi
		fi
	fi

	started_job_nr=$(echo "$sbatch_result" | sed -e 's#.*\s##')

	if [[ $exit_code -eq 0 ]]; then
		if [[ $follow -eq 1 ]]; then
			if command -v sbatch 2>/dev/null >/dev/null; then
				set +e
				LOG_PATH=$(slurmlogpath $started_job_nr)
	
				spin[0]="-"
				spin[1]="\\" # "
				spin[2]="|"
				spin[3]="/"

				last_why_pending_time=$(date +%s)
				last_sq_time=$(date +%s)

				estimated_start_time=""
				estimated_start_time_original=""
				in_about_time=""
				_remaining_time=""
				last_print_line_length=0

				set +x

				while ! [[ -e $LOG_PATH ]]; do
					current_time=$(date +%s)

					time_diff_whypending=$(($current_time - $last_why_pending_time))
					time_diff_sq=$(($current_time - $last_sq_time))

					if command -v whypending 2>/dev/null > /dev/null && [[ $time_diff_whypending -gt 10 ]]; then
						trap - ERR
						estimated_start_time_original=$(timeout 5 whypending $started_job_nr 2>&1 | grep "Estimated" | sed -e 's#.*time:\s*###' -e 's#^\s*##')
						trap 'calltracer' ERR

						current_time=$(date +%s)
						last_why_pending_time=$current_time
						if [[ ! -z $estimated_start_time_original ]] && [[ "$estimated_start_time_original" != *"Unknown"* ]]; then
							estimated_start_time=". Estimated start:$estimated_start_time_original"
							if [[ ! -z $estimated_start_time_original ]]; then
								_remaining_time=""
								_remaining_time=$(remaining_time "$estimated_start_time_original" | sed -e 's#\s\s*# #g')

								if [[ ! -z $_remaining_time ]]; then
									estimated_start_time="$estimated_start_time ($_remaining_time)"
								fi
							fi
						fi
					fi
					
					if command -v squeue 2>/dev/null > /dev/null && [[ $time_diff_sq -gt 60 ]]; then
						current_time=$(date +%s)
						last_sq_time=$current_time

						squeue_me_output=$(squeue --me 2>/dev/null)
						squeue_exit_code=$?

						if [[ $squeue_exit_code -eq "0" ]]; then
							job_still_in_squeue=$(echo "$squeue_me_output" | grep "$started_job_nr" | wc -l)

							if [[ "$job_still_in_squeue" -eq "0" ]]; then
								red_text "The job $started_job_nr was not found in squeue anymore. It seems like it has been cancelled."

								SCONTROL_STATUS=$(scontrol show job $started_job_nr | grep JobState | sed -e 's#^\s*[^=]*=#SLURM-Job-State: #')

								if [[ "$SCONTROL_STATUS" == *"FAILED"* ]]; then
									red_text "$SCONTROL_STATUS"
									if [[ "$SCONTROL_STATUS" == *"RaisedSignal:53"* ]]; then
										red_text "This may indicate a file system error"
									fi
									if command -v findmnt 2>/dev/null >/dev/null; then
										red_text "Mount-Info:"
										findmnt -T $SCRIPT_DIR
									fi
								fi

								myexit 243
							fi
						fi
					fi

					for i in "${spin[@]}"; do
						print_line="Waiting for \e[4mtail -f $LOG_PATH\e[0m$estimated_start_time... "
						print_line_length=$(echo "$print_line" | wc -c)

						#backspaces=""

						#for k in $(seq 0 $(($print_line_length + 1000))); do
						#	backspaces="$backspaces\r"
						#done

						print_line="$print_line$i"
						_tput cr # Move cursor to beginning of line
						_tput el # Delete line from start to finish

						#echo -ne "$backspaces"
						echo -ne "$print_line"
						sleep 0.2

						last_print_line_length=$print_line_length
					done
				done
				set -e

				if [[ "$debug" -eq 1 ]]; then
					set -x
				fi

				printf "\r"

				_tput el

				if [[ -e "$LOG_PATH" ]]; then
					set +x
					kill_tail_when_squeue_job_empty $started_job_nr &
					# weird exec stuff for disabling the "Terminated" message coming from kill
					exec 3>&2          # 3 is now a copy of 2
					exec 2> /dev/null  # 2 now points to /dev/null
					tail -n1000000 -f $LOG_PATH || true
					exec 2>&3          # restore stderr to saved
					exec 3>&-          # close saved version
					if [[ "$debug" -eq "1" ]]; then
						set -x
					fi

					exit_code=$(cat $LOG_PATH | grep -i "exit-code:" | sed -e 's#Exit-Code:\s*##i')
				else
					red_text "$LOG_PATH could not be found"
				fi
			fi
		elif [[ "$wait_until_ended" -eq "1" ]]; then
			if command -v squeue 2>/dev/null >/dev/null; then
				WAIT_NUM_SECONDS=10
				yellow_text "Waiting for job $started_job_nr to end... (Checking every $WAIT_NUM_SECONDS seconds)"

				set +x

				seconds_count=0

				echo ""

				while [[ "$(squeue --me | grep $started_job_nr | wc -l)" -ne "0" ]]; do
					sleep $WAIT_NUM_SECONDS
				done

				echo ""

				if [[ "$debug" -eq 1 ]]; then
					set -x
				fi

				yellow_text "Done waiting for job to end"

				LOG_PATH=$(slurmlogpath $started_job_nr)
				if [[ -e "$LOG_PATH" ]]; then
					cat $LOG_PATH
				else
					red_text "$LOG_PATH could not be found"
				fi
			else
				red_text "squeue not found. Cannot wait for job to end."
			fi
		fi
	else
		red_text "Failed to start sbatch job. Exit-Code: $exit_code\n"

		myexit $exit_code
	fi

fi

echo "Runtime (end): $(displaytime $SECONDS), PID: $$"

if [[ "$exit_code" =~ ^[0-9]+$ ]]; then
	myexit $exit_code
else
	echo "Invalid exit-code >$exit_code< detected!"
	myexit 3
fi
